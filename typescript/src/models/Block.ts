/* tslint:disable */
/* eslint-disable */
/**
 * BlockContent Spec
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TableBlock } from './TableBlock';
import {
    TableBlockFromJSON,
    TableBlockFromJSONTyped,
    TableBlockToJSON,
    TableBlockToJSONTyped,
} from './TableBlock';
import type { ChartBlock } from './ChartBlock';
import {
    ChartBlockFromJSON,
    ChartBlockFromJSONTyped,
    ChartBlockToJSON,
    ChartBlockToJSONTyped,
} from './ChartBlock';
import type { TextBlock } from './TextBlock';
import {
    TextBlockFromJSON,
    TextBlockFromJSONTyped,
    TextBlockToJSON,
    TextBlockToJSONTyped,
} from './TextBlock';

/**
 * A content block, used to represent structured sections such as text, charts, etc.
 * @export
 * @interface Block
 */
export interface Block {
    /**
     * type of block
     * @type {string}
     * @memberof Block
     */
    type?: BlockTypeEnum;
    /**
     * 
     * @type {ChartBlock}
     * @memberof Block
     */
    chartBlock?: ChartBlock;
    /**
     * 
     * @type {TableBlock}
     * @memberof Block
     */
    tableBlock?: TableBlock;
    /**
     * 
     * @type {TextBlock}
     * @memberof Block
     */
    textBlock?: TextBlock;
}


/**
 * @export
 */
export const BlockTypeEnum = {
    Chart: 'chart',
    Table: 'table',
    Text: 'text'
} as const;
export type BlockTypeEnum = typeof BlockTypeEnum[keyof typeof BlockTypeEnum];


/**
 * Check if a given object implements the Block interface.
 */
export function instanceOfBlock(value: object): value is Block {
    return true;
}

export function BlockFromJSON(json: any): Block {
    return BlockFromJSONTyped(json, false);
}

export function BlockFromJSONTyped(json: any, ignoreDiscriminator: boolean): Block {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'] == null ? undefined : json['type'],
        'chartBlock': json['chart_block'] == null ? undefined : ChartBlockFromJSON(json['chart_block']),
        'tableBlock': json['table_block'] == null ? undefined : TableBlockFromJSON(json['table_block']),
        'textBlock': json['text_block'] == null ? undefined : TextBlockFromJSON(json['text_block']),
    };
}

export function BlockToJSON(json: any): Block {
    return BlockToJSONTyped(json, false);
}

export function BlockToJSONTyped(value?: Block | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'chart_block': ChartBlockToJSON(value['chartBlock']),
        'table_block': TableBlockToJSON(value['tableBlock']),
        'text_block': TextBlockToJSON(value['textBlock']),
    };
}

