/* tslint:disable */
/* eslint-disable */
/**
 * BlockContent Spec
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ChartContent } from './ChartContent';
import {
    ChartContentFromJSON,
    ChartContentFromJSONTyped,
    ChartContentToJSON,
    ChartContentToJSONTyped,
} from './ChartContent';
import type { TextContent } from './TextContent';
import {
    TextContentFromJSON,
    TextContentFromJSONTyped,
    TextContentToJSON,
    TextContentToJSONTyped,
} from './TextContent';
import type { TableContent } from './TableContent';
import {
    TableContentFromJSON,
    TableContentFromJSONTyped,
    TableContentToJSON,
    TableContentToJSONTyped,
} from './TableContent';

/**
 * A content block, used to represent structured sections such as text, charts, etc.
 * @export
 * @interface Block
 */
export interface Block {
    /**
     * type of block
     * @type {string}
     * @memberof Block
     */
    type: BlockTypeEnum;
    /**
     * 
     * @type {ChartContent}
     * @memberof Block
     */
    chartContent?: ChartContent;
    /**
     * 
     * @type {TableContent}
     * @memberof Block
     */
    tableContent?: TableContent;
    /**
     * 
     * @type {TextContent}
     * @memberof Block
     */
    textContent?: TextContent;
}


/**
 * @export
 */
export const BlockTypeEnum = {
    Chart: 'chart',
    Table: 'table',
    Text: 'text'
} as const;
export type BlockTypeEnum = typeof BlockTypeEnum[keyof typeof BlockTypeEnum];


/**
 * Check if a given object implements the Block interface.
 */
export function instanceOfBlock(value: object): value is Block {
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function BlockFromJSON(json: any): Block {
    return BlockFromJSONTyped(json, false);
}

export function BlockFromJSONTyped(json: any, ignoreDiscriminator: boolean): Block {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'chartContent': json['chart_content'] == null ? undefined : ChartContentFromJSON(json['chart_content']),
        'tableContent': json['table_content'] == null ? undefined : TableContentFromJSON(json['table_content']),
        'textContent': json['text_content'] == null ? undefined : TextContentFromJSON(json['text_content']),
    };
}

export function BlockToJSON(json: any): Block {
    return BlockToJSONTyped(json, false);
}

export function BlockToJSONTyped(value?: Block | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'chart_content': ChartContentToJSON(value['chartContent']),
        'table_content': TableContentToJSON(value['tableContent']),
        'text_content': TextContentToJSON(value['textContent']),
    };
}

