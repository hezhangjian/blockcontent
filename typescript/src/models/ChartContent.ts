/* tslint:disable */
/* eslint-disable */
/**
 * BlockContent Spec
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ChartContentDatasetsInner } from './ChartContentDatasetsInner';
import {
    ChartContentDatasetsInnerFromJSON,
    ChartContentDatasetsInnerFromJSONTyped,
    ChartContentDatasetsInnerToJSON,
    ChartContentDatasetsInnerToJSONTyped,
} from './ChartContentDatasetsInner';

/**
 * 
 * @export
 * @interface ChartContent
 */
export interface ChartContent {
    /**
     * type of chart
     * @type {string}
     * @memberof ChartContent
     */
    chartType: ChartContentChartTypeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChartContent
     */
    labels: Array<string>;
    /**
     * 
     * @type {Array<ChartContentDatasetsInner>}
     * @memberof ChartContent
     */
    datasets: Array<ChartContentDatasetsInner>;
}


/**
 * @export
 */
export const ChartContentChartTypeEnum = {
    Bar: 'bar',
    Line: 'line',
    Pie: 'pie',
    Scatter: 'scatter'
} as const;
export type ChartContentChartTypeEnum = typeof ChartContentChartTypeEnum[keyof typeof ChartContentChartTypeEnum];


/**
 * Check if a given object implements the ChartContent interface.
 */
export function instanceOfChartContent(value: object): value is ChartContent {
    if (!('chartType' in value) || value['chartType'] === undefined) return false;
    if (!('labels' in value) || value['labels'] === undefined) return false;
    if (!('datasets' in value) || value['datasets'] === undefined) return false;
    return true;
}

export function ChartContentFromJSON(json: any): ChartContent {
    return ChartContentFromJSONTyped(json, false);
}

export function ChartContentFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChartContent {
    if (json == null) {
        return json;
    }
    return {
        
        'chartType': json['chart_type'],
        'labels': json['labels'],
        'datasets': ((json['datasets'] as Array<any>).map(ChartContentDatasetsInnerFromJSON)),
    };
}

export function ChartContentToJSON(json: any): ChartContent {
    return ChartContentToJSONTyped(json, false);
}

export function ChartContentToJSONTyped(value?: ChartContent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'chart_type': value['chartType'],
        'labels': value['labels'],
        'datasets': ((value['datasets'] as Array<any>).map(ChartContentDatasetsInnerToJSON)),
    };
}

