/* tslint:disable */
/* eslint-disable */
/**
 * BlockContent Spec
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ChartBlockDatasetsInner } from './ChartBlockDatasetsInner';
import {
    ChartBlockDatasetsInnerFromJSON,
    ChartBlockDatasetsInnerFromJSONTyped,
    ChartBlockDatasetsInnerToJSON,
    ChartBlockDatasetsInnerToJSONTyped,
} from './ChartBlockDatasetsInner';

/**
 * 
 * @export
 * @interface ChartBlock
 */
export interface ChartBlock {
    /**
     * type of chart
     * @type {string}
     * @memberof ChartBlock
     */
    chartType?: ChartBlockChartTypeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChartBlock
     */
    labels?: Array<string>;
    /**
     * 
     * @type {Array<ChartBlockDatasetsInner>}
     * @memberof ChartBlock
     */
    datasets?: Array<ChartBlockDatasetsInner>;
}


/**
 * @export
 */
export const ChartBlockChartTypeEnum = {
    Bar: 'bar',
    Line: 'line',
    Pie: 'pie'
} as const;
export type ChartBlockChartTypeEnum = typeof ChartBlockChartTypeEnum[keyof typeof ChartBlockChartTypeEnum];


/**
 * Check if a given object implements the ChartBlock interface.
 */
export function instanceOfChartBlock(value: object): value is ChartBlock {
    return true;
}

export function ChartBlockFromJSON(json: any): ChartBlock {
    return ChartBlockFromJSONTyped(json, false);
}

export function ChartBlockFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChartBlock {
    if (json == null) {
        return json;
    }
    return {
        
        'chartType': json['chart_type'] == null ? undefined : json['chart_type'],
        'labels': json['labels'] == null ? undefined : json['labels'],
        'datasets': json['datasets'] == null ? undefined : ((json['datasets'] as Array<any>).map(ChartBlockDatasetsInnerFromJSON)),
    };
}

export function ChartBlockToJSON(json: any): ChartBlock {
    return ChartBlockToJSONTyped(json, false);
}

export function ChartBlockToJSONTyped(value?: ChartBlock | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'chart_type': value['chartType'],
        'labels': value['labels'],
        'datasets': value['datasets'] == null ? undefined : ((value['datasets'] as Array<any>).map(ChartBlockDatasetsInnerToJSON)),
    };
}

